{"name": "test_DB_Val_random_Failure", "status": "failed", "statusDetails": {"message": "Failed", "trace": "@pytest.mark.dbVal\n    @pytest.mark.apiVal\n    @pytest.mark.portalVal\n    @pytest.mark.usefixtures(\"log_on_success\", \"method_setup\")\n    def test_DB_Val_random_Failure():\n        GlobalVariables.apiLogs = False\n        GlobalVariables.portalLogs = False\n        GlobalVariables.cnpWareLogs = False\n        GlobalVariables.middleWareLogs = False\n        global success_Val_Execution\n        success_Val_Execution = True\n    \n        try:\n            print(\"EXECUTING FOURTH TEST CASE : DB VAL EXE FAILURE\")\n            time.sleep(2)\n            setUp.get_TC_Exe_Time() # Get execution time\n        except:\n            setUp.get_TC_Exe_Time()\n            print(\"Testcase did not complete due to exception in testcase execution\")\n            print(\"\")\n            GlobalVariables.EXCEL_TC_Execution = \"Fail\"\n            GlobalVariables.Incomplete_ExecutionCount += 1\n    \n            pytest.fail()\n    \n        else:\n            GlobalVariables.EXCEL_TC_Execution = \"Pass\"\n            current = datetime.now()\n            GlobalVariables.EXCEL_TC_Val_Starting_Time = current.strftime(\"%H:%M:%S\")\n    \n            if (configReader.read_config(\"Validations\", \"api_validation\")) == \"True\":\n                try:\n                    time.sleep(1)\n                    expectedAPIValues = \"qwerty:qwerty,zxcv:zxcv\"\n                except:\n                    print(\"API Validation did not complete due to exception\")\n                    print(\"\")\n                    GlobalVariables.api_ValidationFailureCount += 1\n                    expectedAPIValues = \"Failed\"\n                    GlobalVariables.EXCEL_API_Val = \"Fail\"\n                    success_Val_Execution = False\n            else:\n                expectedAPIValues = \"\"\n    \n            if (configReader.read_config(\"Validations\", \"db_validation\")) == \"True\":\n                try:\n                    time.sleep(1)\n                    # To fail the testcase everytime\n                    a =1/0\n                    print(a)\n    \n                    # To fail the testcase randomly\n                    # a = random.randint(1, 2)\n                    # expectedDBValues = str(a) + \":2\"\n    \n    \n                    # To pass the testcase everytime\n                    # expectedDBValues = \"a:a,b:b\"\n                except:\n                    print(\"DB Validation did not complete due to exception in reading values from DB\")\n                    print(\"\")\n                    GlobalVariables.db_ValidationFailureCount += 1\n                    expectedDBValues = \"Failed\"\n                    GlobalVariables.EXCEL_DB_Val = \"Fail\"\n                    success_Val_Execution = False\n            else:\n                expectedDBValues =\"\"\n    \n            success = setUp.validateValues(expectedAPIValues, expectedDBValues, \"\", \"\")\n    \n            if success_Val_Execution == False:\n                if success == False:\n                    pass\n                else:\n>                   pytest.fail()\nE                   Failed\n\ntest_sample.py:958: Failed"}, "attachments": [{"name": "stdout", "source": "6b06127f-3960-4085-b2da-f4a82a94ead9-attachment.txt", "type": "text/plain"}], "start": 1649418735085, "stop": 1649418738110, "uuid": "52297f35-0749-466b-bade-0bc5d3838282", "historyId": "6e5ad8a82d25b12382dd9b88b80895ff", "testCaseId": "8fd1ea94f55dd61c12fc25f6e81f0f7c", "fullName": "TestCase.test_sample#test_DB_Val_random_Failure", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('log_on_success', 'method_setup')"}, {"name": "tag", "value": "portalVal"}, {"name": "tag", "value": "apiVal"}, {"name": "tag", "value": "dbVal"}, {"name": "parentSuite", "value": "TestCase"}, {"name": "suite", "value": "test_sample"}, {"name": "host", "value": "ezetap"}, {"name": "thread", "value": "28189-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.test_sample"}]}